// === STEP 1: Folder Structure ===
// - frontend/
//   - src/
//     - components/UploadForm.tsx
//     - App.tsx
//     - main.tsx (or index.tsx)

// === STEP 2: .env ===
VITE_API_BASE_URL=http://localhost:5000/api

// === STEP 3: components/UploadForm.tsx ===
import React, { useRef, useState } from 'react';
import axios from 'axios';

const UploadForm: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState<number>(0);

  const audioRef = useRef<HTMLInputElement>(null);
  const imageRef = useRef<HTMLInputElement>(null);
  const zipRef = useRef<HTMLInputElement>(null);
  const producerRef = useRef<HTMLInputElement>(null);
  const emailRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);
  const userId = 'user_1234'; // Replace with auth logic

  const handleUpload = async () => {
    if (!audioRef.current?.files?.[0] || !imageRef.current?.files?.[0] || !zipRef.current?.files?.[0]) return;

    setLoading(true);
    setSuccess(false);
    setError(null);
    setProgress(0);

    const audioName = audioRef.current.files[0].name;
    const imageName = imageRef.current.files[0].name;
    const zipName = zipRef.current.files[0].name;

    try {
      const { data } = await axios.post(`${import.meta.env.VITE_API_BASE_URL}/generate-multi-url`, {
        audioName,
        imageName,
        zipName,
        producer: producerRef.current?.value,
        email: emailRef.current?.value,
        phoneNumber: phoneRef.current?.value,
        userId,
      });

      const handleProgress = (progressEvent: ProgressEvent, fileSize: number) => {
        const percent = Math.round((progressEvent.loaded * 100) / fileSize);
        setProgress(percent);
      };

      await Promise.all([
        axios.put(data.audio.uploadUrl, audioRef.current.files[0], {
          headers: { 'Content-Type': 'audio/mpeg' },
          onUploadProgress: (e) => handleProgress(e, audioRef.current.files[0].size)
        }),
        axios.put(data.image.uploadUrl, imageRef.current.files[0], {
          headers: { 'Content-Type': 'image/jpeg' },
          onUploadProgress: (e) => handleProgress(e, imageRef.current.files[0].size)
        }),
        axios.put(data.zip.uploadUrl, zipRef.current.files[0], {
          headers: { 'Content-Type': 'application/zip' },
          onUploadProgress: (e) => handleProgress(e, zipRef.current.files[0].size)
        })
      ]);

      await axios.post(`${import.meta.env.VITE_API_BASE_URL}/confirm-multi-upload`, {
        audioKey: data.audio.key,
        imageKey: data.image.key,
        zipKey: data.zip.key,
        audioName,
        producer: producerRef.current?.value,
        email: emailRef.current?.value,
        phoneNumber: phoneRef.current?.value,
        userId,
      });

      setSuccess(true);
    } catch (err: any) {
      setError(err?.response?.data?.error || 'Upload failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-xl mx-auto">
      <h2 className="text-xl font-bold mb-2">Upload Audio Bundle</h2>
      <input type="file" accept="audio/*" ref={audioRef} className="mb-2" />
      <input type="file" accept="image/*" ref={imageRef} className="mb-2" />
      <input type="file" accept=".zip" ref={zipRef} className="mb-2" />
      <input type="text" placeholder="Producer" ref={producerRef} className="mb-2 border px-2 py-1" />
      <input type="email" placeholder="Email" ref={emailRef} className="mb-2 border px-2 py-1" />
      <input type="text" placeholder="Phone Number" ref={phoneRef} className="mb-2 border px-2 py-1" />
      <button
        onClick={handleUpload}
        disabled={loading}
        className="bg-blue-500 text-white px-4 py-2 rounded"
      >
        {loading ? `Uploading... ${progress}%` : 'Upload'}
      </button>

      {loading && (
        <div className="w-full bg-gray-200 rounded mt-2">
          <div
            className="bg-blue-600 text-xs font-medium text-white text-center p-0.5 leading-none rounded"
            style={{ width: `${progress}%` }}
          >
            {progress}%
          </div>
        </div>
      )}

      {success && <p className="text-green-600 mt-2">Upload successful!</p>}
      {error && <p className="text-red-600 mt-2">{error}</p>}
    </div>
  );
};

export default UploadForm;

// === STEP 4: App.tsx ===
import React from 'react';
import UploadForm from './components/UploadForm';

const App: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <UploadForm />
    </div>
  );
};

export default App;

// === STEP 5: main.tsx ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
