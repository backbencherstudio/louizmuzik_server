// s3 storage 


// // === BACKEND: src/controllers/upload.controller.ts ===
// import { Request, Response } from 'express';
// import { s3 } from '../config/s3';
// import { Audio } from '../models/Audio.model';
// import { v4 as uuidv4 } from 'uuid';

// const BUCKET_NAME = process.env.S3_BUCKET_NAME!;

// export const generateMultiPresignedUrls = async (req: Request, res: Response) => {
//   const { audioName, imageName, zipName, producer, email, phoneNumber, userId } = req.body;

//   if (!audioName || !imageName || !zipName || !producer || !email || !phoneNumber || !userId) {
//     return res.status(400).json({ error: 'Missing fields' });
//   }

//   try {
//     const audioKey = `uploads/audio/${uuidv4()}-${audioName}`;
//     const imageKey = `uploads/image/${uuidv4()}-${imageName}`;
//     const zipKey = `uploads/zip/${uuidv4()}-${zipName}`;

//     const [audioUrl, imageUrl, zipUrl] = await Promise.all([
//       s3.getSignedUrlPromise('putObject', {
//         Bucket: BUCKET_NAME,
//         Key: audioKey,
//         Expires: 60 * 60,
//         ContentType: 'audio/mpeg',
//       }),
//       s3.getSignedUrlPromise('putObject', {
//         Bucket: BUCKET_NAME,
//         Key: imageKey,
//         Expires: 60 * 60,
//         ContentType: 'image/jpeg', // or image/png
//       }),
//       s3.getSignedUrlPromise('putObject', {
//         Bucket: BUCKET_NAME,
//         Key: zipKey,
//         Expires: 60 * 60,
//         ContentType: 'application/zip',
//       }),
//     ]);

//     const audioPublic = `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${audioKey}`;
//     const imagePublic = `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${imageKey}`;
//     const zipPublic = `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${zipKey}`;

//     return res.json({
//       audio: { uploadUrl: audioUrl, publicUrl: audioPublic, key: audioKey },
//       image: { uploadUrl: imageUrl, publicUrl: imagePublic, key: imageKey },
//       zip: { uploadUrl: zipUrl, publicUrl: zipPublic, key: zipKey },
//       metadata: { producer, email, phoneNumber, userId, audioName },
//     });
//   } catch (err) {
//     console.error(err);
//     return res.status(500).json({ error: 'Failed to generate URLs' });
//   }
// };

// export const confirmMultiUpload = async (req: Request, res: Response) => {
//   const { audioKey, imageKey, zipKey, audioName, producer, email, phoneNumber, userId } = req.body;
//   try {
//     const metaChecks = await Promise.all([
//       s3.headObject({ Bucket: BUCKET_NAME, Key: audioKey }).promise(),
//       s3.headObject({ Bucket: BUCKET_NAME, Key: imageKey }).promise(),
//       s3.headObject({ Bucket: BUCKET_NAME, Key: zipKey }).promise(),
//     ]);

//     if (metaChecks.every(meta => meta.ContentLength && meta.ContentLength > 1024)) {
//       const audioUrl = `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${audioKey}`;
//       const imageUrl = `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${imageKey}`;
//       const zipUrl = `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${zipKey}`;

//       await Audio.create({
//         filename: audioName,
//         audioUrl,
//         imageUrl,
//         zipUrl,
//         producer,
//         email,
//         phoneNumber,
//         userId,
//       });

//       return res.status(200).json({ message: 'All files uploaded and stored.' });
//     } else {
//       return res.status(400).json({ error: 'Some files were not fully uploaded.' });
//     }
//   } catch (err) {
//     console.error(err);
//     return res.status(500).json({ error: 'Upload verification failed.' });
//   }
// };

// // === BACKEND: src/routes/upload.routes.ts ===
// import { Router } from 'express';
// import { generateMultiPresignedUrls, confirmMultiUpload } from '../controllers/upload.controller';

// const router = Router();

// router.post('/generate-multi-url', generateMultiPresignedUrls);
// router.post('/confirm-multi-upload', confirmMultiUpload);

// export default router;

// // === FRONTEND: Upload.tsx ===
// import React, { useState } from 'react';
// import axios from 'axios';

// const MultiUploadForm = () => {
//   const [audio, setAudio] = useState<File | null>(null);
//   const [image, setImage] = useState<File | null>(null);
//   const [zip, setZip] = useState<File | null>(null);
//   const [producer, setProducer] = useState('');
//   const [email, setEmail] = useState('');
//   const [phoneNumber, setPhoneNumber] = useState('');
//   const [uploading, setUploading] = useState(false);

//   const handleSubmit = async () => {
//     if (!audio || !image || !zip) return alert('Missing files');
//     setUploading(true);

//     try {
//       const { data } = await axios.post('http://localhost:5000/api/generate-multi-url', {
//         audioName: audio.name,
//         imageName: image.name,
//         zipName: zip.name,
//         producer,
//         email,
//         phoneNumber,
//         userId: 'example_user_123',
//       });

//       await Promise.all([
//         axios.put(data.audio.uploadUrl, audio, { headers: { 'Content-Type': 'audio/mpeg' } }),
//         axios.put(data.image.uploadUrl, image, { headers: { 'Content-Type': 'image/jpeg' } }),
//         axios.put(data.zip.uploadUrl, zip, { headers: { 'Content-Type': 'application/zip' } }),
//       ]);

//       await axios.post('http://localhost:5000/api/confirm-multi-upload', {
//         audioKey: data.audio.key,
//         imageKey: data.image.key,
//         zipKey: data.zip.key,
//         audioName: audio.name,
//         producer,
//         email,
//         phoneNumber,
//         userId: 'example_user_123',
//       });

//       alert('All files uploaded and stored.');
//     } catch (err) {
//       console.error(err);
//       alert('Upload failed');
//     } finally {
//       setUploading(false);
//     }
//   };

//   return (
//     <div>
//       <input type="file" accept="audio/mpeg" onChange={e => setAudio(e.target.files?.[0] || null)} />
//       <input type="file" accept="image/*" onChange={e => setImage(e.target.files?.[0] || null)} />
//       <input type="file" accept=".zip" onChange={e => setZip(e.target.files?.[0] || null)} />
//       <input type="text" placeholder="Producer" value={producer} onChange={e => setProducer(e.target.value)} />
//       <input type="email" placeholder="Email" value={email} onChange={e => setEmail(e.target.value)} />
//       <input type="text" placeholder="Phone Number" value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} />
//       <button onClick={handleSubmit} disabled={uploading}>Submit</button>
//     </div>
//   );
// };

// export default MultiUploadForm;
