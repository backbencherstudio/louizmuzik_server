/* eslint-disable @typescript-eslint/no-explicit-any */
import Stripe from "stripe";
import { User } from "../User/user.model";


const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);


const stripeSubscription = async (
    req: { body: { email: string; amount: number; paymentMethodId: string } },
    res: any
) => {
    const { email, amount, paymentMethodId, } = req.body;

    if (!email || !amount || !paymentMethodId) {
        return res.status(400).send({
            error: "Email, amount, and payment method are required.",
        });
    }

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).send({ error: "User not found." });
        }

        if (user.customerId) {
            const subscriptions = await stripe.subscriptions.list({
                customer: user.customerId,
                status: "active",
            });

            for (const subscription of subscriptions.data) {
                await stripe.subscriptions.update(subscription.id, {
                    cancel_at_period_end: true,
                });
                console.log(`Marked subscription ${subscription.id} for cancellation at period end for user ${email}`);
            }
        }

        let customerId = user.customerId;
        if (!customerId) {
            const customer = await stripe.customers.create({
                email,
                payment_method: paymentMethodId,
                invoice_settings: {
                    default_payment_method: paymentMethodId,
                },
            });
            customerId = customer.id;
        }

        const product = await stripe.products.create({
            name: `Subscription for ${email}`,
        });

        const price = await stripe.prices.create({
            unit_amount: amount * 100,
            currency: "usd",
            recurring: { interval: "day" },
            product: product.id,
        });

        const subscription = await stripe.subscriptions.create({
            customer: customerId,
            items: [{ price: price.id }],
            expand: ["latest_invoice.payment_intent"],
        });

        const latestInvoice = subscription.latest_invoice as Stripe.Invoice | null;
        const invoicePdf =
            latestInvoice && typeof latestInvoice !== "string"
                ? latestInvoice.invoice_pdf
                : null;

        await User.findOneAndUpdate(
            { email },
            {
                $set: {
                    customerId,
                    subscriptionId: subscription.id,
                    isPro: true,
                    subscribedAmount: amount
                },
            },
            { new: true, runValidators: true }
        );

        res.status(200).send({
            subscriptionId: subscription.id,
            clientSecret: (latestInvoice?.payment_intent as Stripe.PaymentIntent)?.client_secret || null,
            customer_id: customerId,
        });
    } catch (error: any) {
        console.error("Error creating subscription:", error);
        res.status(500).send({ error: "Failed to create subscription." });
    }
};





// const stripeSubscription = async (req : {body : {customerEmail : string, amount : number}}, res : any) => {
//     const {customerEmail, amount} = req.body
//     try {
//         // Create a customer (you can reuse if needed)
//         const customer = await stripe.customers.create({
//             email: customerEmail,
//         });

//         // Create a product
//         const product = await stripe.products.create({
//             name: `Dynamic Plan for ${customerEmail}`,
//         });

//         // Create price dynamically
//         const price = await stripe.prices.create({
//             unit_amount: Math.round(amount * 100), // amount in cents
//             currency: "usd",
//             recurring: { interval: "month" },
//             product: product.id,
//         });

//         // Create subscription
//         const subscription = await stripe.subscriptions.create({
//             customer: customer.id,
//             items: [{ price: price.id }],
//             payment_behavior: "default_incomplete",
//             expand: ["latest_invoice.payment_intent"],
//         });

//         res.send({
//             clientSecret: subscription.latest_invoice.payment_intent.client_secret,
//             subscriptionId: subscription.id,
//         });
//     } catch (err : any) {
//         console.error("Subscription error:", err);
//         res.status(500).send({ error: err.message });
//     }
// }

// const stripeSubscription = async (
//     req: { body: { customerEmail: string; amount: number } },
//     res: any
// ) => {

//     const { customerEmail, amount } = req.body;



//     try {
//         // Create a customer
//         const customer = await stripe.customers.create({
//             email: customerEmail,
//         });

//         // Create a product
//         const product = await stripe.products.create({
//             name: `Dynamic Plan for ${customerEmail}`,
//         });

//         // Create a price
//         const price = await stripe.prices.create({
//             unit_amount: Math.round(amount * 100),
//             currency: "usd",
//             recurring: { interval: "day" },
//             product: product.id,
//         });

//         // Create subscription
//         const subscription = await stripe.subscriptions.create({
//             customer: customer.id,
//             items: [{ price: price.id }],
//             payment_behavior: "default_incomplete",
//             expand: ["latest_invoice.payment_intent"],
//         });

//         // Type narrowing and safety check
//         const invoice = subscription.latest_invoice as Stripe.Invoice;
//         const clientSecret =
//             invoice?.payment_intent &&
//             typeof invoice.payment_intent !== "string" &&
//             invoice.payment_intent.client_secret;

//         if (!clientSecret) {
//             throw new Error("Failed to retrieve client secret.");
//         }

//         res.send({
//             clientSecret,
//             subscriptionId: subscription.id,
//         });
//     } catch (err: any) {
//         console.error("Subscription error:", err);
//         res.status(500).send({ error: err.message });
//     }


// };





export const stripeSubscriptionService = {
    stripeSubscription
}